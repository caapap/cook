"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readRc = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const report_1 = require("../report");
const resolvePath = (dir, config, ignore, logger = report_1.env.defaultLogger) => {
    const result = {
        config: undefined,
        ignore: undefined
    };
    dir = (0, path_1.resolve)(dir !== null && dir !== void 0 ? dir : '.');
    if (!(0, fs_1.existsSync)(dir)) {
        logger.log(`"${dir}" does not exist.`);
        return result;
    }
    config = (0, path_1.resolve)(dir, config !== null && config !== void 0 ? config : '.zhlintrc');
    if ((0, fs_1.existsSync)(config)) {
        result.config = config;
    }
    else {
        logger.log(`Config file "${config}" does not exist. Will proceed as default.`);
    }
    ignore = (0, path_1.resolve)(dir, ignore !== null && ignore !== void 0 ? ignore : '.zhlintignore');
    if ((0, fs_1.existsSync)(ignore)) {
        result.ignore = ignore;
    }
    else {
        logger.log(`Global ignored cases file "${ignore}" does not exist. Will proceed as none.`);
    }
    return result;
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const readJSONSync = (filepath) => {
    const output = (0, fs_1.readFileSync)(filepath, { encoding: 'utf8' });
    return JSON.parse(output);
};
const resolveConfig = (normalizedConfigPath, normalizedIgnorePath, logger = report_1.env.defaultLogger) => {
    const result = {
        preset: 'default'
    };
    if (normalizedConfigPath) {
        try {
            const config = readJSONSync(normalizedConfigPath);
            if (typeof config.preset === 'string') {
                result.preset = config.preset;
            }
            if (typeof config.rules === 'object') {
                result.rules = config.rules;
            }
            if (Array.isArray(config.hyperParsers)) {
                result.hyperParsers = config.hyperParsers;
            }
            if (Array.isArray(config.ignores)) {
                result.ignores = config.ignores;
            }
        }
        catch (error) {
            logger.log(`Failed to read "${normalizedConfigPath}": ${error.message}`);
        }
    }
    if (normalizedIgnorePath) {
        try {
            const ignores = (0, fs_1.readFileSync)(normalizedIgnorePath, { encoding: 'utf8' });
            ignores
                .split(/\n/)
                .map((x) => x.trim())
                .forEach((x) => {
                if (!x) {
                    return;
                }
                if (!result.ignores) {
                    result.ignores = [];
                }
                if (result.ignores.indexOf(x) === -1) {
                    result.ignores.push(x);
                }
            });
        }
        catch (error) {
            logger.log(`Failed to read "${normalizedIgnorePath}": ${error.message}`);
        }
    }
    return result;
};
const readRc = (dir, config, ignore, logger = report_1.env.defaultLogger) => {
    const { config: normalizedConfigPath, ignore: normalizedIgnorePath } = resolvePath(dir, config, ignore, logger);
    return resolveConfig(normalizedConfigPath, normalizedIgnorePath, logger);
};
exports.readRc = readRc;
