"use strict";
/**
 * @fileoverview
 *
 * This rule is checking spaces besides quotations.
 *
 * Options
 * - noSpaceInsideQuote: boolean | undefined
 * - spaceOutsideHalfQuote: boolean | undefined
 * - noSpaceOutsideFullQuote: boolean | undefined
 *
 * Details:
 * - noSpaceInsideQuote:
 *   - left-quote x right-quote
 *   - content/punctuation/right-quote/right-bracket/code/unknown/container x right-quote
 *   - left-quote x content/punctuation/left-quote/left-bracket/code/unknown/container
 * - spaceOutsideHalfQuote:
 *   - right-half-quote x left-half-quote
 *   - content/code x left-half-quote
 *   - right-half-quote x content/code
 * - noSpaceOutsideFullQuote:
 *   - right-full-quote x left-full-quote
 *   - content/code x left-full-quote
 *   - right-full-quote x content/code
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const parser_1 = require("../parser");
const util_1 = require("./util");
const messages_1 = require("./messages");
const isFullWidth = (char, adjusted) => {
    return (0, parser_1.isFullwidthPair)(char) && adjusted.indexOf(char) === -1;
};
const generateHandler = (options) => {
    const noSpaceInsideQuoteOption = options.noSpaceInsideQuotation;
    const spaceOutsideHalfQuoteOption = options.spaceOutsideHalfwidthQuotation;
    const noSpaceOutsideFullQuoteOption = options.noSpaceOutsideFullwidthQuotation;
    const adjustedFullWidthOption = options.adjustedFullwidthPunctuation || '';
    return (token, _, group) => {
        // skip non-group tokens
        if (token.type !== parser_1.GroupTokenType.GROUP) {
            return;
        }
        // 1. no space inside quotation
        if (noSpaceInsideQuoteOption) {
            // 1.1 left-quote x content/punctuation/left-quote/left-bracket/code/unknown/container
            const firstInsdieToken = token[0];
            if (firstInsdieToken &&
                firstInsdieToken.markSide !== parser_1.MarkSideType.RIGHT) {
                (0, util_1.checkInnerSpaceBefore)(token, '', messages_1.QUOTE_NOSPACE_INSIDE);
            }
            // 1.2 content/punctuation/right-quote/right-bracket/code/unknown/container x right-quote
            const lastInsideToken = token[token.length - 1];
            if (lastInsideToken && lastInsideToken.markSide !== parser_1.MarkSideType.LEFT) {
                (0, util_1.checkSpaceAfter)(lastInsideToken, '', messages_1.QUOTE_NOSPACE_INSIDE);
            }
            // 1.3 left-quote x right-quote
            if (!firstInsdieToken) {
                (0, util_1.checkInnerSpaceBefore)(token, '', messages_1.QUOTE_NOSPACE_INSIDE);
            }
        }
        // 2. space outside half/full quotation
        if (typeof spaceOutsideHalfQuoteOption !== 'undefined' ||
            noSpaceOutsideFullQuoteOption) {
            // 2.1 right-quote x left-quote
            const contentTokenAfter = (0, util_1.findNonCodeVisibleTokenAfter)(group, token);
            if (contentTokenAfter &&
                contentTokenAfter.type === parser_1.GroupTokenType.GROUP) {
                const { spaceHost } = (0, util_1.findWrappersBetween)(group, token, contentTokenAfter);
                if (spaceHost) {
                    const fullWidth = isFullWidth(token.modifiedEndValue, adjustedFullWidthOption) ||
                        isFullWidth(contentTokenAfter.modifiedStartValue, adjustedFullWidthOption);
                    // 2.1.1 right-full-quote x left-full-quote
                    // 2.1.2 right-half-quote x left-half-quote
                    if (fullWidth) {
                        if (noSpaceOutsideFullQuoteOption) {
                            (0, util_1.checkSpaceAfter)(spaceHost, '', messages_1.QUOTE_SPACE_OUTSIDE);
                        }
                    }
                    else {
                        if (typeof spaceOutsideHalfQuoteOption !== 'undefined') {
                            const spaceAfter = spaceOutsideHalfQuoteOption ? ' ' : '';
                            const message = spaceOutsideHalfQuoteOption
                                ? messages_1.QUOTE_SPACE_OUTSIDE
                                : messages_1.QUOTE_NOSPACE_OUTSIDE;
                            (0, util_1.checkSpaceAfter)(spaceHost, spaceAfter, message);
                        }
                    }
                }
            }
            // 2.2 content/code x left-quote
            const contentTokenBefore = (0, util_1.findNonCodeVisibleTokenBefore)(group, token);
            if (contentTokenBefore &&
                ((0, parser_1.isLetterType)(contentTokenBefore.type) ||
                    contentTokenBefore.type === parser_1.HyperTokenType.CODE_CONTENT)) {
                const { spaceHost } = (0, util_1.findWrappersBetween)(group, contentTokenBefore, token);
                if (spaceHost) {
                    const fullWidth = isFullWidth(token.modifiedStartValue, adjustedFullWidthOption);
                    // 2.2.1 content/code x left-full-quote
                    // 2.2.2 content/code x left-half-quote
                    if (fullWidth) {
                        if (noSpaceOutsideFullQuoteOption) {
                            (0, util_1.checkSpaceAfter)(spaceHost, '', messages_1.QUOTE_NOSPACE_OUTSIDE);
                        }
                    }
                    else {
                        if (typeof spaceOutsideHalfQuoteOption !== 'undefined') {
                            const spaceAfter = spaceOutsideHalfQuoteOption ? ' ' : '';
                            const message = spaceOutsideHalfQuoteOption
                                ? messages_1.QUOTE_SPACE_OUTSIDE
                                : messages_1.QUOTE_NOSPACE_OUTSIDE;
                            (0, util_1.checkSpaceAfter)(spaceHost, spaceAfter, message);
                        }
                    }
                }
            }
            // 2.3 right-quote x content/code
            if (contentTokenAfter &&
                ((0, parser_1.isLetterType)(contentTokenAfter.type) ||
                    contentTokenAfter.type === parser_1.HyperTokenType.CODE_CONTENT)) {
                const { spaceHost } = (0, util_1.findWrappersBetween)(group, token, contentTokenAfter);
                if (spaceHost) {
                    const fullWidth = isFullWidth(token.modifiedEndValue, adjustedFullWidthOption);
                    // 2.3.1 right-full-quote x content/code
                    // 2.3.2 right-half-quote x content/code
                    if (fullWidth) {
                        if (noSpaceOutsideFullQuoteOption) {
                            (0, util_1.checkSpaceAfter)(spaceHost, '', messages_1.QUOTE_NOSPACE_OUTSIDE);
                        }
                    }
                    else {
                        if (typeof spaceOutsideHalfQuoteOption !== 'undefined') {
                            const spaceAfter = spaceOutsideHalfQuoteOption ? ' ' : '';
                            const message = spaceOutsideHalfQuoteOption
                                ? messages_1.QUOTE_SPACE_OUTSIDE
                                : messages_1.QUOTE_NOSPACE_OUTSIDE;
                            (0, util_1.checkSpaceAfter)(spaceHost, spaceAfter, message);
                        }
                    }
                }
            }
        }
    };
};
exports.defaultConfig = {
    spaceOutsideHalfQuote: true,
    noSpaceInsideQuote: true,
    noSpaceOutsideFullQuote: true
};
exports.default = generateHandler;
