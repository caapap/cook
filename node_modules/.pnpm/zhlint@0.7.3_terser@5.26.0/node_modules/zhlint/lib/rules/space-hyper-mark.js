"use strict";
/**
 * @fileoverview
 *
 * This rule is to ensure all the existing spaces should be outside hyper
 * marks like *, _, [, ], etc.
 *
 * Options:
 * - noSpaceInsideMark: boolean | undefined
 *
 * For example:
 * - `x _ ** yyy ** _ z` should be `x _**yyy**_ z`
 *
 * Details:
 * - left-mark x left-mark: `x _ **yyy**_ z`
 *                             ^^^
 * - right-mark x right-mark: `x _**yyy** _ z`
 *                                      ^^^
 * - left-mark x non-mark: `x _** yyy**_ z`
 *                              ^^^
 * - non-mark x right-mark: `x _**yyy **_ z`
 *                                 ^^^
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const util_1 = require("./util");
const parser_1 = require("../parser");
const messages_1 = require("./messages");
const generateHandler = (options) => {
    const noSpaceInsideMarkOption = options === null || options === void 0 ? void 0 : options.noSpaceInsideHyperMark;
    return (token, _, group) => {
        // skip if there is no options
        if (!noSpaceInsideMarkOption) {
            return;
        }
        // skip non-after-token situations
        const tokenAfter = (0, util_1.findTokenAfter)(group, token);
        if (!tokenAfter) {
            return;
        }
        // skip non-mark situations
        if (!(0, util_1.isWrapper)(token) && !(0, util_1.isWrapper)(tokenAfter)) {
            return;
        }
        // 1. left x left, right x right
        // 2. left x non-mark
        // 3. non-mark x right
        const markSideBefore = (0, util_1.getWrapperSide)(token);
        const markSideAfter = (0, util_1.getWrapperSide)(tokenAfter);
        if (markSideBefore === markSideAfter) {
            (0, util_1.checkSpaceAfter)(token, '', messages_1.MARKDOWN_NOSPACE_INSIDE);
        }
        else if (markSideBefore === parser_1.MarkSideType.LEFT && !(0, util_1.isWrapper)(tokenAfter)) {
            (0, util_1.checkSpaceAfter)(token, '', messages_1.MARKDOWN_NOSPACE_INSIDE);
        }
        else if (markSideAfter === parser_1.MarkSideType.RIGHT && !(0, util_1.isWrapper)(token)) {
            (0, util_1.checkSpaceAfter)(token, '', messages_1.MARKDOWN_NOSPACE_INSIDE);
        }
    };
};
exports.defaultConfig = {
    noSpaceInsideMark: true
};
exports.default = generateHandler;
