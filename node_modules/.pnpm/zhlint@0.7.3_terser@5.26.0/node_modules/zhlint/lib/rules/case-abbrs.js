"use strict";
/**
 * @fileoverview
 *
 * This rule is used to revert changes of abbreviations.
 *
 * Details:
 * - the point is rever the trailing dot
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const parser_1 = require("../parser");
const report_1 = require("../report");
const util_1 = require("./util");
const defaultSkippedAbbrs = [
    'Mr.',
    'Mrs.',
    'Dr.',
    'Jr.',
    'Sr.',
    'vs.',
    'etc.',
    'i.e.',
    'e.g.',
    'a.k.a.'
];
const reverseAbbrsIntoChars = (abbrs) => {
    return abbrs.map((str) => str.split('.').reverse().slice(1));
};
const matchAbbr = (token, group, reversedAbbrChars) => {
    // find previous token
    const tokenBefore = (0, util_1.findTokenBefore)(group, token);
    if (tokenBefore && !tokenBefore.spaceAfter) {
        // get the next matching abbr chars by removing the last char and filtering
        const matchedAbbrChars = reversedAbbrChars
            .filter((abbr) => abbr[0].toLowerCase() === tokenBefore.value.toLowerCase())
            .map((abbr) => abbr.slice(1));
        // keep matching until any abbr chars fully matched
        // then return true
        if (matchedAbbrChars.length) {
            const lastMatched = matchedAbbrChars[matchedAbbrChars.length - 1];
            if (lastMatched.length) {
                const tokenBeforeBefore = (0, util_1.findTokenBefore)(group, tokenBefore);
                if (tokenBeforeBefore &&
                    !tokenBeforeBefore.spaceAfter &&
                    tokenBeforeBefore.value === '.') {
                    const result = matchAbbr(tokenBeforeBefore, group, matchedAbbrChars);
                    if (result) {
                        return true;
                    }
                }
            }
            else {
                return true;
            }
        }
    }
    return false;
};
const generateHandler = (options) => {
    const reversedAbbrChars = reverseAbbrsIntoChars(options.skipAbbrs || []);
    return (token, _, group) => {
        // skip non-dot tokens
        if (token.value !== '.') {
            return;
        }
        // make sure it's the ending dot of the abbr
        const tokenAfter = (0, util_1.findTokenAfter)(group, token);
        if (tokenAfter &&
            tokenAfter.type === parser_1.CharType.WESTERN_LETTER &&
            !token.spaceAfter) {
            return;
        }
        // keep the dot if the previous tokens match any abbr
        if (matchAbbr(token, group, reversedAbbrChars)) {
            token.modifiedValue = '.';
            token.modifiedType = token.type;
            (0, util_1.removeValidationOnTarget)(token, report_1.ValidationTarget.VALUE);
        }
    };
};
exports.defaultConfig = {
    skipAbbrs: defaultSkippedAbbrs
};
exports.default = generateHandler;
