"use strict";
/**
 * @fileoverview
 *
 * This rule is checking spaces besides brackets.
 *
 * Options
 * - noSpaceInsideBracket: boolean | undefined
 * - spaceOutsideHalfBracket: boolean | undefined
 * - nospaceOutsideFullBracket: boolean | undefined
 *
 * Details:
 * - noSpaceInsideBracket:
 *   - left-bracket x anything
 *   - non-left-bracket x right-bracket
 * - spaceOutsideHalfBracket:
 *   - right-half-bracket x left-half-bracket
 *   - right-half-bracket x content/left-quote/code
 *   - content/right-quote/code x left-half-bracket
 * - noSpaceOutsideFullBracket:
 *   - right-full-bracket x left-full-bracket
 *   - right-full-bracket x content/left-quote/code
 *   - content/right-quote/code x left-full-bracket
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = void 0;
const parser_1 = require("../parser");
const util_1 = require("./util");
const messages_1 = require("./messages");
const isFullWidth = (char, adjusted) => {
    return (0, parser_1.isFullwidthPair)(char) && adjusted.indexOf(char) === -1;
};
const shouldSkip = (before, beforeTokenSeq, token, afterTokenSeq, after) => {
    if (!before || !after) {
        return false;
    }
    if ((0, parser_1.isFullwidthPair)(token.value) || (0, parser_1.isFullwidthPair)(token.modifiedValue)) {
        return false;
    }
    if (beforeTokenSeq.filter((x) => x.spaceAfter).length ||
        afterTokenSeq.filter((x) => x.spaceAfter).length) {
        return false;
    }
    return (
    // x(x
    //  ^
    (before.type === parser_1.CharType.WESTERN_LETTER ||
        // x()
        //  ^
        (before.value === '(' && token.value === ')')) &&
        // x)x
        //  ^
        (after.type === parser_1.CharType.WESTERN_LETTER ||
            // ()x
            //  ^
            (token.value === '(' && after.value === ')')));
};
const generateHandler = (options) => {
    const noInsideBracketOption = options.noSpaceInsideBracket;
    const spaceOutsideHalfBracketOption = options.spaceOutsideHalfwidthBracket;
    const noSpaceOutsideFullBracketOption = options.noSpaceOutsideFullwidthBracket;
    const adjustedFullWidthOption = options.adjustedFullwidthPunctuation || '';
    return (token, _, group) => {
        // skip non-bracket tokens
        if (token.type !== parser_1.HyperTokenType.BRACKET_MARK) {
            return;
        }
        // 1. no space inside bracket
        if (noInsideBracketOption) {
            if (token.markSide === parser_1.MarkSideType.LEFT) {
                // no space after
                const tokenAfter = (0, util_1.findTokenAfter)(group, token);
                if (tokenAfter) {
                    (0, util_1.checkSpaceAfter)(token, '', messages_1.BRACKET_NOSPACE_INSIDE);
                }
            }
            else {
                // no space before
                const tokenBefore = (0, util_1.findTokenBefore)(group, token);
                if (tokenBefore &&
                    // dedupe
                    tokenBefore.markSide !== parser_1.MarkSideType.LEFT) {
                    (0, util_1.checkSpaceAfter)(tokenBefore, '', messages_1.BRACKET_NOSPACE_INSIDE);
                }
            }
        }
        // skip bracket between half-width content without spaces
        // or empty brackets beside half-width content without spaces
        const contentTokenBefore = (0, util_1.findVisibleTokenBefore)(group, token);
        const contentTokenAfter = (0, util_1.findVisibleTokenAfter)(group, token);
        const { spaceHost: beforeSpaceHost, tokens: beforeTokenSeq } = (0, util_1.findWrappersBetween)(group, contentTokenBefore, token);
        const { spaceHost: afterSpaceHost, tokens: afterTokenSeq } = (0, util_1.findWrappersBetween)(group, token, contentTokenAfter);
        if (shouldSkip(contentTokenBefore, beforeTokenSeq, token, afterTokenSeq, contentTokenAfter)) {
            return;
        }
        // 2. spaces outside half/full bracket
        if (typeof spaceOutsideHalfBracketOption !== 'undefined' ||
            noSpaceOutsideFullBracketOption) {
            const fullWidth = isFullWidth(token.modifiedValue, adjustedFullWidthOption);
            // 2.1 right-bracket x left-bracket
            if (contentTokenAfter) {
                if (token.markSide === parser_1.MarkSideType.RIGHT &&
                    contentTokenAfter.markSide === parser_1.MarkSideType.LEFT) {
                    if (afterSpaceHost) {
                        const hasFullWidth = fullWidth ||
                            isFullWidth(contentTokenAfter.modifiedValue, adjustedFullWidthOption);
                        // 2.1.1 any-full-bracket
                        // 2.1.2 right-half-bracket x left-half-bracket
                        if (hasFullWidth) {
                            if (noSpaceOutsideFullBracketOption) {
                                (0, util_1.checkSpaceAfter)(token, '', messages_1.BRACKET_NOSPACE_OUTSIDE);
                            }
                        }
                        else {
                            // skip no spaces between
                            if (afterTokenSeq.filter((x) => x.spaceAfter).length > 0) {
                                if (typeof spaceOutsideHalfBracketOption !== 'undefined') {
                                    const spaceAfter = spaceOutsideHalfBracketOption ? ' ' : '';
                                    const message = spaceOutsideHalfBracketOption
                                        ? messages_1.BRACKET_SPACE_OUTSIDE
                                        : messages_1.BRACKET_NOSPACE_OUTSIDE;
                                    (0, util_1.checkSpaceAfter)(token, spaceAfter, message);
                                }
                            }
                        }
                    }
                }
            }
            // 2.2 content/right-quote/code x left-bracket
            // 2.3 right-racket x content/left-quote/code
            if (token.markSide === parser_1.MarkSideType.LEFT) {
                if (contentTokenBefore &&
                    ((0, parser_1.isLetterType)(contentTokenBefore.type) ||
                        contentTokenBefore.type === parser_1.GroupTokenType.GROUP ||
                        contentTokenBefore.type === parser_1.HyperTokenType.CODE_CONTENT)) {
                    if (beforeSpaceHost) {
                        // 2.2.1 content/right-quote/code x left-full-bracket
                        // 2.2.2 content/right-quote/code x left-half-bracket
                        if (fullWidth ||
                            (contentTokenBefore.type === parser_1.GroupTokenType.GROUP &&
                                isFullWidth(contentTokenBefore.modifiedEndValue, adjustedFullWidthOption))) {
                            if (noSpaceOutsideFullBracketOption) {
                                (0, util_1.checkSpaceAfter)(beforeSpaceHost, '', messages_1.BRACKET_NOSPACE_OUTSIDE);
                            }
                        }
                        else {
                            if (typeof spaceOutsideHalfBracketOption !== 'undefined') {
                                const spaceAfter = spaceOutsideHalfBracketOption ? ' ' : '';
                                const message = spaceOutsideHalfBracketOption
                                    ? messages_1.BRACKET_SPACE_OUTSIDE
                                    : messages_1.BRACKET_NOSPACE_OUTSIDE;
                                (0, util_1.checkSpaceAfter)(beforeSpaceHost, spaceAfter, message);
                            }
                        }
                    }
                }
            }
            else {
                if (contentTokenAfter &&
                    ((0, parser_1.isLetterType)(contentTokenAfter.type) ||
                        contentTokenAfter.type === parser_1.GroupTokenType.GROUP ||
                        contentTokenAfter.type === parser_1.HyperTokenType.CODE_CONTENT)) {
                    if (afterSpaceHost) {
                        // 2.3.1 right-full-bracket x content/left-quote/code
                        // 2.4.2 right-half-bracket x content/left-quote/code
                        if (fullWidth ||
                            (contentTokenAfter.type === parser_1.GroupTokenType.GROUP &&
                                isFullWidth(contentTokenAfter.modifiedStartValue, adjustedFullWidthOption))) {
                            if (noSpaceOutsideFullBracketOption) {
                                (0, util_1.checkSpaceAfter)(afterSpaceHost, '', messages_1.BRACKET_NOSPACE_OUTSIDE);
                            }
                        }
                        else {
                            if (typeof spaceOutsideHalfBracketOption !== 'undefined') {
                                const spaceAfter = spaceOutsideHalfBracketOption ? ' ' : '';
                                const message = spaceOutsideHalfBracketOption
                                    ? messages_1.BRACKET_SPACE_OUTSIDE
                                    : messages_1.BRACKET_NOSPACE_OUTSIDE;
                                (0, util_1.checkSpaceAfter)(afterSpaceHost, spaceAfter, message);
                            }
                        }
                    }
                }
            }
        }
    };
};
exports.defaultConfig = {
    spaceOutsideHalfBracket: true,
    noSpaceInsideBracket: true
};
exports.default = generateHandler;
