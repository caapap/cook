"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.report = exports.reportItem = exports.ValidationTarget = exports.env = void 0;
const chalk_1 = __importDefault(require("chalk"));
const parser_1 = require("./parser");
exports.env = {
    stdout: (_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.process) === null || _a === void 0 ? void 0 : _a.stdout,
    stderr: (_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.process) === null || _b === void 0 ? void 0 : _b.stderr,
    defaultLogger: console
};
if (globalThis.__DEV__) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const fs = require('fs');
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { Console: NativeConsole } = require('console');
    exports.env.stdout = fs.createWriteStream('./stdout.log', { encoding: 'utf-8' });
    exports.env.stderr = fs.createWriteStream('./stderr.log', { encoding: 'utf-8' });
    exports.env.defaultLogger = new NativeConsole(exports.env.stdout, exports.env.stderr);
}
const getPositionByOffset = (str, offset) => {
    const rows = str.split('\n');
    const rowLengthList = rows.map((substr) => substr.length);
    const position = {
        offset,
        row: 0,
        column: 0,
        line: ''
    };
    while (position.offset >= 0 && rows.length) {
        position.row++;
        position.column = position.offset;
        position.line = rows.shift() || '';
        position.offset -= (rowLengthList.shift() || 0) + 1;
    }
    return position;
};
var ValidationTarget;
(function (ValidationTarget) {
    ValidationTarget["VALUE"] = "value";
    ValidationTarget["START_VALUE"] = "startValue";
    ValidationTarget["END_VALUE"] = "endValue";
    ValidationTarget["SPACE_AFTER"] = "spaceAfter";
    ValidationTarget["INNER_SPACE_BEFORE"] = "innerSpaceBefore";
})(ValidationTarget = exports.ValidationTarget || (exports.ValidationTarget = {}));
const adjustedFullwidthPunctuations = `“”‘’`;
const generateMarker = (str, index) => {
    const prefix = str.substring(0, index);
    let fullwidthCount = 0;
    let halfwidthCount = 0;
    for (let i = 0; i < prefix.length; i++) {
        const charType = (0, parser_1.checkCharType)(prefix[i]);
        if (charType === parser_1.CharType.CJK_CHAR ||
            ((0, parser_1.isFullwidthPunctuationType)(charType) &&
                adjustedFullwidthPunctuations.indexOf(prefix[i]) === -1)) {
            fullwidthCount++;
        }
        else if (charType === parser_1.CharType.WESTERN_LETTER ||
            ((0, parser_1.isHalfwidthPunctuationType)(charType) &&
                adjustedFullwidthPunctuations.indexOf(prefix[i]) !== -1) ||
            charType === parser_1.CharType.SPACE) {
            halfwidthCount++;
        }
    }
    return (' '.repeat(halfwidthCount) +
        '　'.repeat(fullwidthCount) +
        `${chalk_1.default.red('^')}`);
};
const reportItem = (file = '', str, validations, logger = exports.env.defaultLogger) => {
    validations.forEach(({ index, length, target, message }) => {
        // 0. final index and position
        const finalIndex = target === 'spaceAfter' || target === 'endValue' ? index + length : index;
        const { row, column, line } = getPositionByOffset(str, finalIndex);
        // 1. headline
        const fileDisplay = `${chalk_1.default.blue.bgWhite(file)}${file ? ':' : ''}`;
        const positionDisplay = `${chalk_1.default.yellow(row)}:${chalk_1.default.yellow(column)}`;
        const headline = `${fileDisplay}${positionDisplay} - ${message}`;
        // 2. display fragment
        const displayRange = 20;
        const displayStart = column - displayRange < 0 ? 0 : column - displayRange;
        const displayEnd = column + length + displayRange > line.length - 1
            ? line.length
            : column + length + displayRange;
        const displayFragment = line
            .substring(displayStart, displayEnd)
            .replace(/\n/g, '\\n');
        // 3. marker below
        const markerBelow = generateMarker(displayFragment, column - displayStart);
        logger.error(`${headline}\n\n${displayFragment}\n${markerBelow}\n`);
    });
};
exports.reportItem = reportItem;
const report = (resultList, logger = exports.env.defaultLogger) => {
    let errorCount = 0;
    const invalidFiles = [];
    resultList
        .filter(({ file, disabled }) => {
        if (disabled) {
            if (file) {
                logger.log(`${chalk_1.default.blue.bgWhite(file)}: disabled`);
            }
            else {
                logger.log(`disabled`);
            }
            return false;
        }
        return true;
    })
        .forEach(({ file, origin, validations }) => {
        (0, exports.reportItem)(file, origin, validations, logger);
        errorCount += validations.length;
        if (file && validations.length) {
            invalidFiles.push(file);
        }
    });
    if (errorCount) {
        const errors = [];
        errors.push('Invalid files:');
        errors.push('- ' + invalidFiles.join('\n- ') + '\n');
        errors.push(`Found ${errorCount} ${errorCount > 1 ? 'errors' : 'error'}.`);
        logger.error(errors.join('\n'));
        return 1;
    }
    else {
        logger.log(`No error found.`);
    }
};
exports.report = report;
